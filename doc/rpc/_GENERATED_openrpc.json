{
  "openrpc": "1.0.0",
  "info": {
    "description": "This API lets you interact with a RSK client via JSON-RPC",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "title": "RSK JSON-RPC",
    "version": "1.0.10"
  },
  "methods": [
    {
      "examples": [
        {
          "name": "blockNumber",
          "params": [],
          "result": {
            "name": "blockNumber",
            "value": "0xc94"
          }
        }
      ],
      "name": "eth_blockNumber",
      "params": [],
      "result": {
        "$ref": "#/components/contentDescriptors/BlockNumberOrTag"
      },
      "summary": "Returns the number of most recent block."
    },
    {
      "examples": [
        {
          "description": "callExample",
          "name": "callExample",
          "params": [
            {
              "$ref": "#/components/schemas/TransactionCreateExampleParam"
            },
            {
              "name": "blockRef",
              "value": "latest"
            }
          ],
          "result": {
            "name": "result",
            "value": "0x"
          }
        }
      ],
      "name": "eth_call",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/TransactionCreate"
        },
        {
          "name": "blockRefOrNumberOrTag",
          "required": true,
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/BlockRef"
              },
              {
                "$ref": "#/components/schemas/BlockNumberHex"
              },
              {
                "$ref": "#/components/schemas/BlockNumberDec"
              },
              {
                "$ref": "#/components/schemas/BlockNumberTag"
              }
            ],
            "title": "blockRefOrNumberOrTag"
          }
        }
      ],
      "result": {
        "description": "The return value of the executed contract",
        "name": "returnValue",
        "schema": {
          "$ref": "#/components/schemas/Bytes"
        }
      },
      "summary": "Executes a new message call (locally) immediately without creating a transaction on the block chain."
    },
    {
      "description": "Returns the currently configured chain id, a value used in replay-protected transaction signing as introduced by **EIP-155**.",
      "examples": [
        {
          "name": "rskMainnetChainId",
          "params": [],
          "result": {
            "name": "rskMainnetChainId",
            "value": "0x1e"
          }
        },
        {
          "name": "rskTestnetChainId",
          "params": [],
          "result": {
            "name": "rskTestnetChainId",
            "value": "0x1f"
          }
        }
      ],
      "name": "eth_chainId",
      "params": [],
      "result": {
        "description": "hex format integer of the current chain id. Defaults are `Mainnet=30`, `Testnet=31`",
        "name": "chainId",
        "schema": {
          "$ref": "#/components/schemas/IntegerHex"
        }
      },
      "summary": "Returns the currently configured chain id"
    },
    {
      "examples": [
        {
          "name": "coinbaseAddress",
          "params": [],
          "result": {
            "name": "coinbaseAddress",
            "value": "0xc94770007dda54cF92009BFF0dE90c06F603a09f"
          }
        }
      ],
      "name": "eth_coinbase",
      "params": [],
      "result": {
        "description": "The address owned by the client that is used as default for things like the mining reward",
        "name": "address",
        "schema": {
          "$ref": "#/components/schemas/Address"
        }
      },
      "summary": "Returns the client coinbase address."
    },
    {
      "description": "Generates and returns an estimate of how much gas is necessary to allow the transaction to complete. The transaction will not be added to the blockchain. Note that the estimate may be significantly more than the amount of gas actually used by the transaction, for a variety of reasons including EVM mechanics and node performance. \n\n See `eth_call` parameters, expect that all properties are optional. If no gas limit is specified geth uses the block gas limit from the pending block as an upper bound. As a result the returned estimate might not be enough to executed the call/transaction when the amount of gas is higher than the pending block gas limit.",
      "examples": [
        {
          "name": "gasEstimation",
          "params": [
            {
              "$ref": "#/components/schemas/TransactionCreateExampleParam"
            }
          ],
          "result": {
            "name": "result",
            "value": "0x5208"
          }
        }
      ],
      "name": "eth_estimateGas",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/TransactionCreate"
        }
      ],
      "result": {
        "description": "The amount of gas used",
        "name": "gasUsed",
        "schema": {
          "$ref": "#/components/schemas/IntegerHex"
        }
      },
      "summary": "Calculates an estimate of how much gas is necessary to allow the transaction to complete"
    },
    {
      "examples": [
        {
          "name": "gasPrice",
          "params": [],
          "result": {
            "name": "gasPrice",
            "value": "0x09184e72a000"
          }
        }
      ],
      "name": "eth_gasPrice",
      "params": [],
      "result": {
        "$ref": "#/components/contentDescriptors/GasPrice"
      },
      "summary": "Returns the current price per gas in wei"
    },
    {
      "examples": [
        {
          "description": "getBalanceExample",
          "name": "getBalanceExample",
          "params": [
            {
              "name": "address",
              "value": "0xc94770007dda54cF92009BFF0dE90c06F603a09f"
            },
            {
              "name": "blockTag",
              "value": "latest"
            }
          ],
          "result": {
            "name": "result",
            "value": "0x0234c8a3397aab58"
          }
        }
      ],
      "name": "eth_getBalance",
      "params": [
        {
          "description": "Address to check for balance",
          "name": "address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Address"
          }
        },
        {
          "$ref": "#/components/contentDescriptors/BlockRefOrNumberOrTag"
        }
      ],
      "result": {
        "name": "getBalanceResult",
        "schema": {
          "description": "Hex representation of the integer, `0x0` if the address is not found",
          "pattern": "^0x[a-fA-F0-9]+$",
          "title": "integer",
          "type": "string"
        }
      },
      "summary": "Returns the balance of the account of given address, 0 if not fo"
    },
    {
      "examples": [
        {
          "description": "blockWithFullTransactions",
          "name": "blockWithFullTransactions",
          "params": [
            {
              "name": "blockHash",
              "value": "0xf1652d8322a880e520f996f7d28b645814a58a202d7d2ab7f058e5566fe4f9f3"
            },
            {
              "name": "fullTransactionObjects",
              "value": true
            }
          ],
          "result": {
            "$ref": "#/components/schemas/BlockExampleResultFullTransaction"
          }
        },
        {
          "description": "blockWithTransactionHash",
          "name": "blockWithTransactionHash",
          "params": [
            {
              "name": "blockHash",
              "value": "0xf1652d8322a880e520f996f7d28b645814a58a202d7d2ab7f058e5566fe4f9f3"
            },
            {
              "name": "fullTransactionObjects",
              "value": false
            }
          ],
          "result": {
            "$ref": "#/components/schemas/BlockExampleResultTransactionHash"
          }
        }
      ],
      "name": "eth_getBlockByHash",
      "params": [
        {
          "name": "blockHash",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BlockHash"
          }
        },
        {
          "description": "If `true` this method returns the full transaction objects, if `false` only the hashes of the transactions.",
          "name": "fullTransactionObjects",
          "required": true,
          "schema": {
            "title": "fullTransactionObjects",
            "type": "boolean"
          }
        }
      ],
      "result": {
        "name": "getBlockByHashResult",
        "schema": {
          "$ref": "#/components/schemas/BlockOrNull"
        }
      },
      "summary": "Returns information about a block by hash"
    },
    {
      "examples": [
        {
          "description": "blockWithFullTransactions",
          "name": "blockWithFullTransactions",
          "params": [
            {
              "name": "blockNumber",
              "value": "0x1b4"
            },
            {
              "name": "fullTransactionObjects",
              "value": true
            }
          ],
          "result": {
            "$ref": "#/components/schemas/BlockExampleResultFullTransaction"
          }
        },
        {
          "description": "blockWithTransactionHash",
          "name": "blockWithTransactionHash",
          "params": [
            {
              "name": "blockNumber",
              "value": "0x1b4"
            },
            {
              "name": "fullTransactionObjects",
              "value": false
            }
          ],
          "result": {
            "$ref": "#/components/schemas/BlockExampleResultTransactionHash"
          }
        }
      ],
      "name": "eth_getBlockByNumber",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/BlockNumberOrTag"
        },
        {
          "description": "If `true` returns the full transaction objects, if `false` only the hashes of the transactions.",
          "name": "fullTransactionObjects",
          "required": true,
          "schema": {
            "title": "fullTransactionObjects",
            "type": "boolean"
          }
        }
      ],
      "result": {
        "name": "getBlockByNumberResult",
        "schema": {
          "$ref": "#/components/schemas/BlockOrNull"
        }
      },
      "summary": "Returns information about a block by block number"
    },
    {
      "examples": [
        {
          "name": "blockWithTransactions",
          "params": [
            {
              "name": "blockHash",
              "value": "0xb125fbdfa4a07258e2653c4c7412d060362928aaf062b5f91321d5ceed66854a"
            }
          ],
          "result": {
            "name": "blockWithTransactions",
            "value": "0x2"
          }
        },
        {
          "name": "blockWithoutTransactions (just coinbase)",
          "params": [
            {
              "name": "blockHash",
              "value": "0x4ed6a09e66f012643bebd2944a79b4eaf96faf822d11fa3904b6bb7c4b16d66c"
            }
          ],
          "result": {
            "name": "blockWithoutTransactions",
            "value": "0x1"
          }
        }
      ],
      "name": "eth_getBlockTransactionCountByHash",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/BlockHash"
        }
      ],
      "result": {
        "description": "The Number of total transactions in the given block",
        "name": "blockTransactionCountByHash",
        "schema": {
          "$ref": "#/components/schemas/IntegerOrNull"
        }
      },
      "summary": "Returns the number of transactions in a block from a block matching the given block hash."
    },
    {
      "examples": [
        {
          "name": "blockWithTransactions",
          "params": [
            {
              "name": "blockNumer",
              "value": "0x2e5e54"
            }
          ],
          "result": {
            "name": "blockWithTransactions",
            "value": "0x2"
          }
        },
        {
          "name": "blockWithoutTransactions (just coinbase)",
          "params": [
            {
              "name": "blockNumer",
              "value": "0x2e5e56"
            }
          ],
          "result": {
            "name": "blockWithoutTransactions",
            "value": "0x1"
          }
        }
      ],
      "name": "eth_getBlockTransactionCountByNumber",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/BlockNumberOrTag"
        }
      ],
      "result": {
        "description": "The Number of total transactions in the given block",
        "name": "blockTransactionCountByNumber",
        "schema": {
          "$ref": "#/components/schemas/IntegerHex"
        }
      },
      "summary": "Returns the number of transactions in a block from a block matching the given block number."
    },
    {
      "examples": [
        {
          "name": "getCodeExample",
          "params": [
            {
              "name": "transaction",
              "value": "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b"
            },
            {
              "name": "blockNumber",
              "value": "0x2"
            }
          ],
          "result": {
            "name": "result",
            "value": "0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056"
          }
        }
      ],
      "name": "eth_getCode",
      "params": [
        {
          "description": "The address of the contract",
          "name": "address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Address"
          }
        },
        {
          "$ref": "#/components/contentDescriptors/BlockRefOrNumberOrTag"
        }
      ],
      "result": {
        "description": "The code from the given address",
        "name": "code",
        "schema": {
          "$ref": "#/components/schemas/Bytes"
        }
      },
      "summary": "Returns code at a given contract address"
    },
    {
      "examples": [
        {
          "name": "logResult",
          "params": [
            {
              "name": "filterId",
              "value": "0x16"
            }
          ],
          "result": {
            "name": "result",
            "value": [
              {
                "$ref": "#/components/schemas/LogExampleResult"
              }
            ]
          }
        }
      ],
      "externalDocs": {
        "description": "Result of this method is too big for this doc, please check more info on",
        "url": "https://developers.rsk.co/rsk/node/architecture/json-rpc/"
      },
      "name": "eth_getFilterChanges",
      "params": [
        {
          "name": "filterId",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/FilterId"
          }
        }
      ],
      "result": {
        "name": "logResult",
        "schema": {
          "description": "Array of log objects, or an empty array if nothing has changed since last poll. For more info check https://developers.rsk.co/rsk/node/architecture/json-rpc/",
          "items": {
            "$ref": "#/components/schemas/Log"
          },
          "title": "logResult",
          "type": "array"
        }
      },
      "summary": "Polling method for a filter, which returns an array of logs which occurred since last poll."
    },
    {
      "examples": [
        {
          "name": "logsResult",
          "params": [
            {
              "name": "filterId",
              "value": "0x16"
            }
          ],
          "result": {
            "name": "result",
            "value": [
              {
                "$ref": "#/components/schemas/LogExampleResult"
              }
            ]
          }
        }
      ],
      "externalDocs": {
        "description": "Result of this method is too big for this doc, please check more info on",
        "url": "https://developers.rsk.co/rsk/node/architecture/json-rpc/"
      },
      "name": "eth_getFilterLogs",
      "params": [
        {
          "name": "filterId",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/FilterId"
          }
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/Logs"
      },
      "summary": "Returns an array of all logs matching filter with given id."
    },
    {
      "examples": [
        {
          "name": "logsByTopic",
          "params": [
            {
              "name": "filter",
              "value": {
                "topics": [
                  "0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b"
                ]
              }
            }
          ],
          "result": {
            "name": "result",
            "value": [
              {
                "$ref": "#/components/schemas/LogExampleResult"
              }
            ]
          }
        }
      ],
      "name": "eth_getLogs",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Filter"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/Logs"
      },
      "summary": "Returns an array of all logs matching a given filter object."
    },
    {
      "examples": [
        {
          "description": "See example explanation in [Dev Portal](https://developers.rsk.co/rsk/node/architecture/json-rpc/)",
          "name": "storageValue",
          "params": [
            {
              "name": "address",
              "value": "0x295a70b2de5e3953354a6a8344e616ed314d7251"
            },
            {
              "name": "position",
              "value": "0x6661e9d6d8b923d5bbaab1b96e1dd51ff6ea2a93520fdc9eb75d059238b8c5e9"
            },
            {
              "name": "blockTag",
              "value": "latest"
            }
          ],
          "result": {
            "name": "result",
            "value": "0x000000000000000000000000000000000000000000000000000000000000162e"
          }
        }
      ],
      "name": "eth_getStorageAt",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Address"
        },
        {
          "$ref": "#/components/contentDescriptors/Position"
        },
        {
          "$ref": "#/components/contentDescriptors/BlockNumberOrTag"
        }
      ],
      "result": {
        "name": "dataWord",
        "schema": {
          "$ref": "#/components/schemas/DataWord"
        }
      },
      "summary": "Gets a storage value from a contract address, a position, and an optional blockNumber"
    },
    {
      "examples": [
        {
          "name": "existingExample",
          "params": [
            {
              "name": "blockHash",
              "value": "0x0297ed9012b044e671a86a8e88bc7cfc79311a1da38b807783ac87b9b89b1b69"
            },
            {
              "name": "index",
              "value": "0x0"
            }
          ],
          "result": {
            "name": "transaction",
            "value": {
              "$ref": "#/components/schemas/TransactionExampleResult"
            }
          }
        },
        {
          "name": "nullExample",
          "params": [
            {
              "name": "blockHash",
              "value": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
            },
            {
              "name": "index",
              "value": "0x0"
            }
          ],
          "result": {
            "name": "noTransaction",
            "value": null
          }
        }
      ],
      "name": "eth_getTransactionByBlockHashAndIndex",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/BlockHash"
        },
        {
          "description": "The ordering in which a transaction is mined within its block.",
          "name": "index",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/IntegerHex"
          }
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/TransactionResult"
      },
      "summary": "Returns information about a transaction by block hash and transaction index position."
    },
    {
      "examples": [
        {
          "name": "existingExample",
          "params": [
            {
              "name": "blockNumber",
              "value": "0x29c"
            },
            {
              "name": "index",
              "value": "0x0"
            }
          ],
          "result": {
            "name": "transaction",
            "value": {
              "$ref": "#/components/schemas/TransactionExampleResult"
            }
          }
        },
        {
          "name": "nullExample",
          "params": [
            {
              "name": "blockNumber",
              "value": "0x174876e800"
            },
            {
              "name": "index",
              "value": "0x0"
            }
          ],
          "result": {
            "name": "nullResultExample",
            "value": null
          }
        }
      ],
      "name": "eth_getTransactionByBlockNumberAndIndex",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/BlockNumberOrTag"
        },
        {
          "description": "The ordering in which a transaction is mined within its block.",
          "name": "index",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/IntegerHex"
          }
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/TransactionResult"
      },
      "summary": "Returns the information about a transaction requested by the block number and index of which it was mined."
    },
    {
      "examples": [
        {
          "name": "transactionFound",
          "params": [
            {
              "name": "txHash",
              "value": "0x05140aca6b0312a2d7dce35a3227b86b8a973fc69e508c5d4beb2b3c88fa28a1"
            }
          ],
          "result": {
            "name": "transaction",
            "value": {
              "$ref": "#/components/schemas/TransactionExampleResult"
            }
          }
        },
        {
          "name": "transactionNotFound",
          "params": [
            {
              "name": "txHash",
              "value": "0x52ba75091ea97266d10a1d8c827c449464321729f33f9bb25bacc9816a4bccaa"
            }
          ],
          "result": {
            "name": "noTransaction",
            "value": null
          }
        }
      ],
      "name": "eth_getTransactionByHash",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/TransactionHash"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/TransactionResult"
      },
      "summary": "Returns the information about a transaction requested by transaction hash."
    },
    {
      "examples": [
        {
          "name": "found",
          "params": [
            {
              "name": "address",
              "value": "0xc94770007dda54cF92009BFF0dE90c06F603a09f"
            },
            {
              "name": "blockTag",
              "value": "latest"
            }
          ],
          "result": {
            "name": "nonce",
            "value": "0x1"
          }
        },
        {
          "name": "notFound",
          "params": [
            {
              "name": "address",
              "value": "0x546bf98e30785c887cdb23267cbffefeb4b0a72b"
            },
            {
              "name": "blockTag",
              "value": "latest"
            }
          ],
          "result": {
            "name": "nonce",
            "value": "null"
          }
        }
      ],
      "name": "eth_getTransactionCount",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Address"
        },
        {
          "$ref": "#/components/contentDescriptors/BlockRefOrNumberOrTag"
        }
      ],
      "result": {
        "name": "transactionCount",
        "schema": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/Nonce"
            },
            {
              "$ref": "#/components/schemas/Null"
            }
          ],
          "title": "nonceOrNull"
        }
      },
      "summary": "Returns the number of transactions `sent` from an address"
    },
    {
      "description": "**Note** that the receipt is not available for pending transactions.",
      "examples": [
        {
          "name": "receiptResult",
          "params": [
            {
              "name": "transactionHash",
              "value": "0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238"
            }
          ],
          "result": {
            "name": "result",
            "value": [
              {
                "blockHash": "0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b",
                "blockNumber": "0xb",
                "contractAddress": "0xb60e8dd61c5d32be8058bb8eb970870f07233155",
                "cumulativeGasUsed": "0x33bc",
                "gasUsed": "0x4dc",
                "logs": [
                  {
                    "$ref": "#/components/schemas/LogExampleResult"
                  }
                ],
                "logsBloom": "0x00...0",
                "status": "0x1",
                "transactionHash": "0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238",
                "transactionIndex": "0x1"
              }
            ]
          }
        }
      ],
      "name": "eth_getTransactionReceipt",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/TransactionHash"
        }
      ],
      "result": {
        "description": "returns either a receipt or null",
        "name": "transactionReceiptResult",
        "schema": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/Receipt"
            },
            {
              "$ref": "#/components/schemas/Null"
            }
          ],
          "title": "transactionReceiptOrNull"
        }
      },
      "summary": "Returns the receipt information of a transaction by its hash."
    },
    {
      "examples": [
        {
          "name": "uncleBlockFound",
          "params": [
            {
              "name": "blockHash",
              "value": "0x0297ed9012b044e671a86a8e88bc7cfc79311a1da38b807783ac87b9b89b1b69"
            },
            {
              "name": "uncleIndex",
              "value": "0x0"
            }
          ],
          "result": {
            "$ref": "#/components/schemas/BlockExampleResultFullTransaction"
          }
        },
        {
          "name": "uncleBlockNotFound",
          "params": [
            {
              "name": "blockHash",
              "value": "0x0297ed9012b044e671a86a8e88bc7cfc79311a1da38b807783ac87b9b89b1b69"
            },
            {
              "name": "uncleIndex",
              "value": "0x0"
            }
          ],
          "result": {
            "name": "nullResult",
            "value": null
          }
        }
      ],
      "name": "eth_getUncleByBlockHashAndIndex",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/BlockHash"
        },
        {
          "description": "The ordering in which a uncle is included within its block.",
          "name": "index",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/IntegerHex"
          }
        }
      ],
      "result": {
        "name": "uncle",
        "schema": {
          "$ref": "#/components/schemas/BlockOrNull"
        }
      },
      "summary": "Returns information about a uncle of a block by hash and uncle index position."
    },
    {
      "examples": [
        {
          "name": "uncleBlockFound",
          "params": [
            {
              "name": "blockNumber",
              "value": "0x29c"
            },
            {
              "name": "uncleIndex",
              "value": "0x0"
            }
          ],
          "result": {
            "$ref": "#/components/schemas/BlockExampleResultFullTransaction"
          }
        },
        {
          "name": "uncleBlockNotFound",
          "params": [
            {
              "name": "blockNumber",
              "value": "0x0"
            },
            {
              "name": "uncleIndex",
              "value": "0x0"
            }
          ],
          "result": {
            "name": "nullResultExample",
            "value": null
          }
        }
      ],
      "name": "eth_getUncleByBlockNumberAndIndex",
      "params": [
        {
          "description": "The block in which the uncle was included",
          "name": "uncleBlockNumber",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BlockNumberHex"
          }
        },
        {
          "description": "The ordering in which a uncle is included within its block.",
          "name": "index",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/IntegerHex"
          }
        }
      ],
      "result": {
        "description": "returns an uncle block or null",
        "name": "uncleResult",
        "schema": {
          "$ref": "#/components/schemas/BlockOrNull"
        }
      },
      "summary": "Returns information about a uncle of a block by hash and uncle index position."
    },
    {
      "examples": [
        {
          "description": "uncleCount",
          "name": "uncleCount",
          "params": [
            {
              "name": "blockHash",
              "value": "0xf1652d8322a880e520f996f7d28b645814a58a202d7d2ab7f058e5566fe4f9f3"
            }
          ],
          "result": {
            "name": "result",
            "value": "0x2"
          }
        }
      ],
      "name": "eth_getUncleCountByBlockHash",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/BlockHash"
        }
      ],
      "result": {
        "description": "The Number of total uncles in the given block",
        "name": "uncleCountResult",
        "schema": {
          "$ref": "#/components/schemas/IntegerOrNull"
        }
      },
      "summary": "Returns the number of uncles in a block from a block matching the given block hash."
    },
    {
      "examples": [
        {
          "name": "uncleBlockFound",
          "params": [
            {
              "name": "blockNumberOrTag",
              "value": "0x1b4"
            }
          ],
          "result": {
            "name": "result",
            "value": "0x2"
          }
        }
      ],
      "name": "eth_getUncleCountByBlockNumber",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/BlockNumberOrTag"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/UncleCountResult"
      },
      "summary": "Returns the number of uncles in a block from a block matching the given block number."
    },
    {
      "examples": [
        {
          "name": "hashRate",
          "params": [],
          "result": {
            "name": "result",
            "value": "0x38a"
          }
        }
      ],
      "name": "eth_hashrate",
      "params": [],
      "result": {
        "description": "Integer (hex) of the number of hashes per second",
        "name": "hashesPerSecond",
        "schema": {
          "$ref": "#/components/schemas/IntegerHex"
        }
      },
      "summary": "Returns the number of hashes per second that the node is mining with."
    },
    {
      "examples": [
        {
          "name": "isMining",
          "params": [],
          "result": {
            "name": "result",
            "value": true
          }
        }
      ],
      "name": "eth_mining",
      "params": [],
      "result": {
        "description": "Whether or not the client is mining",
        "name": "mining",
        "schema": {
          "type": "boolean"
        }
      },
      "summary": "Returns true if client is actively mining new blocks."
    },
    {
      "examples": [
        {
          "name": "newBlockFilter",
          "params": [],
          "result": {
            "name": "filterId",
            "value": "0x1"
          }
        }
      ],
      "name": "eth_newBlockFilter",
      "params": [],
      "result": {
        "$ref": "#/components/contentDescriptors/FilterId"
      },
      "summary": "Creates a filter in the node, to notify when a new block arrives. To check if the state has changed, call eth_getFilterChanges."
    },
    {
      "description": "To check if the state has changed, call `eth_getFilterChanges`.\n\n**A note on specifying topic filters**:\nTopics are order-dependent. A transaction with a log with topics `[A, B]` will be matched by the following topic filters:\n\n`[]` anything\n`[A]` A in first position (and anything after)\n`[null, B]` anything in first position AND B in second position (and anything after)\n`[A, B]` A in first position AND B in second position (and anything after)\n`[[A, B], [A, B]]` (A OR B) in first position AND (A OR B) in second position (and anything after)",
      "examples": [
        {
          "name": "newFilter",
          "params": [
            {
              "name": "filter",
              "value": {
                "address": "0x8888f1f195afa192cfee860698584c030f4c9db1",
                "fromBlock": "0x1",
                "toBlock": "0x2",
                "topics": [
                  "0x0000000000000000000000000000000000000000000000000000000012341234"
                ]
              }
            }
          ],
          "result": {
            "name": "filterId",
            "value": "0x1"
          }
        }
      ],
      "name": "eth_newFilter",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Filter"
        }
      ],
      "result": {
        "description": "The filter ID for use in `eth_getFilterChanges`",
        "name": "filterId",
        "schema": {
          "$ref": "#/components/schemas/IntegerHex"
        }
      },
      "summary": "Creates a filter object, based on filter options, to notify when the state changes (logs)."
    },
    {
      "description": "To check if the state has changed, call `eth_getFilterChanges`.",
      "examples": [
        {
          "name": "newPendingTransactionFilter",
          "params": [],
          "result": {
            "name": "filterId",
            "value": "0x1"
          }
        }
      ],
      "name": "eth_newPendingTransactionFilter",
      "params": [],
      "result": {
        "$ref": "#/components/contentDescriptors/FilterId"
      },
      "summary": "Creates a filter in the node, to notify when new pending transactions arrive."
    },
    {
      "examples": [
        {
          "name": "protocolVersion",
          "params": [],
          "result": {
            "name": "protocolVersion",
            "value": "62"
          }
        }
      ],
      "name": "eth_protocolVersion",
      "params": [],
      "result": {
        "description": "The current ethereum protocol version",
        "name": "protocolVersion",
        "schema": {
          "$ref": "#/components/schemas/IntegerDec"
        }
      },
      "summary": "Returns the current ethereum protocol version."
    },
    {
      "examples": [
        {
          "name": "rawTransaction",
          "params": [
            {
              "name": "rawTransaction",
              "value": "0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675"
            }
          ],
          "result": {
            "name": "transactionHash",
            "value": "0x0297ed9012b044e671a86a8e88bc7cfc79311a1da38b807783ac87b9b89b1b69"
          }
        }
      ],
      "name": "eth_sendRawTransaction",
      "params": [
        {
          "description": "The signed transaction data",
          "name": "signedTransactionData",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Bytes"
          }
        }
      ],
      "result": {
        "description": "The transaction hash, or the zero hash if the transaction is not yet available.\n\nUse `eth_getTransactionReceipt` to get the contract address, after the transaction was mined, when you created a contract.",
        "name": "transactionHash",
        "schema": {
          "$ref": "#/components/schemas/Keccak"
        }
      },
      "summary": "Creates new message call transaction or a contract creation for signed transactions."
    },
    {
      "examples": [
        {
          "name": "transaction",
          "params": [
            {
              "$ref": "#/components/schemas/TransactionCreateExampleParam"
            }
          ],
          "result": {
            "name": "transactionHash",
            "value": "0x0297ed9012b044e671a86a8e88bc7cfc79311a1da38b807783ac87b9b89b1b69"
          }
        }
      ],
      "name": "eth_sendTransaction",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/TransactionCreate"
        }
      ],
      "result": {
        "description": "The transaction hash, or `zero` hash if the transaction is not yet available.\n\nUse `eth_getTransactionReceipt` to get the contract address, after the transaction was mined, when you created a contract.",
        "name": "transactionHash",
        "schema": {
          "$ref": "#/components/schemas/Keccak"
        }
      },
      "summary": "Creates new message call transaction or a contract creation, if the data field contains code."
    },
    {
      "description": "The sign method calculates an Ethereum specific signature with: `sign(keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message)))`.\n\nBy adding a prefix to the message makes the calculated signature recognisable as an Ethereum specific signature. This prevents misuse where a malicious DApp can sign arbitrary data (e.g. transaction) and use the signature to impersonate the victim.\n\n**Note** the address to sign with must be unlocked.\n\n",
      "examples": [
        {
          "name": "messageToSign",
          "params": [
            {
              "name": "address",
              "value": "0x9b2055d370f73ec7d8a03e965129118dc8f5bf83"
            },
            {
              "name": "message",
              "value": "0xdeadbeaf"
            }
          ],
          "result": {
            "name": "signedMessage",
            "value": "0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b"
          }
        }
      ],
      "name": "eth_sign",
      "params": [
        {
          "description": "Unlocked address to sign",
          "name": "address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Address"
          }
        },
        {
          "description": "Message to be signed",
          "name": "message",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Bytes"
          }
        }
      ],
      "result": {
        "description": "The signed message",
        "name": "signedMessage",
        "schema": {
          "title": "message",
          "type": "string"
        }
      },
      "summary": "Calculates an Ethereum specific signature"
    },
    {
      "examples": [
        {
          "name": "whenSyncing",
          "params": [],
          "result": {
            "name": "result",
            "value": {
              "currentBlock": "0x386",
              "highestBlock": "0x454",
              "startingBlock": "0x384"
            }
          }
        },
        {
          "name": "whenNotSyncing",
          "params": [],
          "result": {
            "name": "result",
            "value": false
          }
        }
      ],
      "name": "eth_syncing",
      "params": [],
      "result": {
        "name": "syncing",
        "schema": {
          "oneOf": [
            {
              "description": "An object with sync status data",
              "properties": {
                "currentBlock": {
                  "$ref": "#/components/schemas/IntegerHex",
                  "description": "The current block, same as eth_blockNumber",
                  "title": "syncingDataCurrentBlock"
                },
                "highestBlock": {
                  "$ref": "#/components/schemas/IntegerHex",
                  "description": "The estimated highest block",
                  "title": "syncingDataHighestBlock"
                },
                "knownStates": {
                  "$ref": "#/components/schemas/IntegerHex",
                  "description": "The known states",
                  "title": "syncingDataKnownStates"
                },
                "pulledStates": {
                  "$ref": "#/components/schemas/IntegerHex",
                  "description": "The pulled states",
                  "title": "syncingDataPulledStates"
                },
                "startingBlock": {
                  "$ref": "#/components/schemas/IntegerHex",
                  "description": "Block at which the import started (will only be reset, after the sync reached his head)",
                  "title": "syncingDataStartingBlock"
                }
              },
              "title": "syncingData",
              "type": "object"
            },
            {
              "title": "notSyncing",
              "type": "boolean"
            }
          ],
          "title": "isSyncingResult"
        }
      },
      "summary": "Returns an object with data about the sync status or false."
    },
    {
      "description": "Additionally Filters timeout when they aren't requested with `eth_getFilterChanges` for a period of time.",
      "examples": [
        {
          "name": "uninstallSuccessExample",
          "params": [
            {
              "name": "filterId",
              "value": "0xb"
            }
          ],
          "result": {
            "name": "uninstallSuccessExample",
            "value": true
          }
        }
      ],
      "name": "eth_uninstallFilter",
      "params": [
        {
          "name": "filterId",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/FilterId"
          }
        }
      ],
      "result": {
        "description": "returns `true` if the filter was successfully uninstalled, `false` otherwise.",
        "name": "filterUninstalledSuccess",
        "schema": {
          "type": "boolean"
        }
      },
      "summary": "Uninstalls a filter with given id. Should always be called when watch is no longer needed."
    },
    {
      "examples": [
        {
          "name": "work",
          "params": [],
          "result": {
            "name": "work",
            "value": [
              "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef",
              "0x5EED00000000000000000000000000005EED0000000000000000000000000000",
              "0xd1ff1c01710000000000000000000000d1ff1c01710000000000000000000000"
            ]
          }
        }
      ],
      "name": "mnr_getWork",
      "params": [],
      "result": {
        "name": "work",
        "schema": {
          "items": [
            {
              "$ref": "#/components/schemas/PowHash"
            },
            {
              "$ref": "#/components/schemas/SeedHash"
            },
            {
              "$ref": "#/components/schemas/Difficulty"
            }
          ],
          "title": "getWorkResults",
          "type": "array"
        }
      },
      "summary": "Returns the hash of the current block, the seedHash, and the boundary condition to be met ('target')."
    },
    {
      "examples": [
        {
          "name": "submitWorkExample",
          "params": [
            {
              "name": "nonceExample",
              "value": "0x0000000000000001"
            },
            {
              "name": "powHashExample",
              "value": "0x6bf2cAE0dE3ec3ecA5E194a6C6e02cf42aADfe1C2c4Fff12E5D36C3Cf7297F22"
            },
            {
              "name": "mixHashExample",
              "value": "0xD1FE5700000000000000000000000000D1FE5700000000000000000000000000"
            }
          ],
          "result": {
            "description": "this example should return `false` as it is not a valid pow to submit",
            "name": "solutionInvalidExample",
            "value": false
          }
        }
      ],
      "name": "mnr_submitWork",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Nonce"
        },
        {
          "name": "powHash",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/PowHash"
          }
        },
        {
          "name": "mixHash",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/MixHash"
          }
        }
      ],
      "result": {
        "description": "returns `true` if the provided solution is valid, otherwise `false`.",
        "name": "isSolutionValid",
        "schema": {
          "type": "boolean"
        }
      },
      "summary": "Used for submitting a proof-of-work solution."
    },
    {
      "description": "Determines if this client is actively listening for new network connections.",
      "examples": [
        {
          "name": "peerCount",
          "params": [],
          "result": {
            "name": "count",
            "value": "0x2"
          }
        }
      ],
      "name": "net_listening",
      "params": [],
      "result": {
        "description": "`true` if listening is active, `false` otherwise",
        "name": "netListeningResult",
        "schema": {
          "title": "isNetListening",
          "type": "boolean"
        }
      },
      "summary": "Returns client listening status"
    },
    {
      "description": "Returns the number of peers currently connected to this client.",
      "examples": [
        {
          "name": "peerCount",
          "params": [],
          "result": {
            "name": "peerCount",
            "value": "0x2"
          }
        }
      ],
      "name": "net_peerCount",
      "params": [],
      "result": {
        "description": "Hex of the number of connected peers.",
        "name": "quantity",
        "schema": {
          "description": "Hex representation of number of connected peers",
          "title": "numConnectedPeers",
          "type": "string"
        }
      },
      "summary": "Number of peers"
    },
    {
      "description": "Returns the list of peers currently connected to this client.",
      "examples": [
        {
          "description": "Example with connected peers",
          "name": "connectedPeersExample",
          "params": [],
          "result": {
            "name": "connectedPeersResult",
            "value": [
              "3fd44f66 | ec2-52-15-37-171.us-east-2.compute.amazonaws.com/52.15.37.171:5050",
              "50517861 | bootstrap14.rsk.co/54.169.136.187:5050",
              "434f8932 | bootstrap07.rsk.co/54.169.12.15:5050"
            ]
          }
        }
      ],
      "name": "net_peerList",
      "params": [],
      "result": {
        "description": "The list of peers",
        "name": "array",
        "schema": {
          "description": "The list of peers",
          "title": "connectedPeers",
          "type": "array"
        }
      },
      "summary": "List of peers"
    },
    {
      "description": "Returns the current network id.\n\nMainnet Chain Id = `30`, Testnet Chain Id = `31`.",
      "examples": [
        {
          "name": "rskMainnetId",
          "params": [],
          "result": {
            "name": "rskMainnetId",
            "value": 30
          }
        },
        {
          "name": "rskTestnetID",
          "params": [],
          "result": {
            "name": "rskTestnetID",
            "value": 31
          }
        }
      ],
      "name": "net_version",
      "params": [],
      "result": {
        "description": "Network ID associated with the current network",
        "name": "networkId",
        "schema": {
          "pattern": "^[\\d]+$",
          "title": "networkId",
          "type": "string"
        }
      },
      "summary": "Network identifier associated with network"
    },
    {
      "description": "Returns the version of the current client",
      "examples": [
        {
          "name": "basicExample",
          "params": [],
          "result": {
            "description": "Current client version",
            "name": "version",
            "value": "RskJ/3.3.1/Linux/Java1.8/IRIS-58406e0"
          }
        }
      ],
      "name": "web3_clientVersion",
      "params": [],
      "result": {
        "description": "Client version",
        "name": "clientVersion",
        "schema": {
          "title": "clientVersion",
          "type": "string"
        }
      },
      "summary": "current client version"
    },
    {
      "description": "Returns Keccak-256 (`NOT` the standardized SHA3-256) of the given data",
      "examples": [
        {
          "name": "sha3Example",
          "params": [
            {
              "name": "sha3ParamExample",
              "value": "0x68656c6c6f20776f726c64"
            }
          ],
          "result": {
            "name": "sha3ResultExample",
            "value": "0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad"
          }
        }
      ],
      "name": "web3_sha3",
      "params": [
        {
          "description": "Data to hash using the Keccak-256 algorithm",
          "name": "data",
          "schema": {
            "pattern": "^0x[a-fA-F\\d]+$",
            "title": "data",
            "type": "string"
          },
          "summary": "Data to hash"
        }
      ],
      "result": {
        "description": "Keccak-256 hash of the given data",
        "name": "hashedData",
        "schema": {
          "$ref": "#/components/schemas/Keccak"
        }
      },
      "summary": "Hashes data"
    }
  ],
  "components": {
    "schemas": {
      "Address": {
        "description": "EOA or Contract address",
        "pattern": "^0x[a-fA-F\\d]{40}$",
        "title": "address",
        "type": "string"
      },
      "AddressOrNull": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Address"
          },
          {
            "$ref": "#/components/schemas/Null"
          }
        ],
        "title": "addressOrNull"
      },
      "Addresses": {
        "description": "List of contract addresses from which to monitor events",
        "items": {
          "$ref": "#/components/schemas/Address"
        },
        "title": "addresses",
        "type": "array"
      },
      "Block": {
        "description": "The Block is the collection of relevant pieces of information (known as the block header), together with information corresponding to the comprised transactions, and a set of other block headers that are known to have a parent equal to the present block’s parent’s parent.",
        "properties": {
          "bitcoinMergedMiningCoinbaseTransaction": {
            "description": "The bitcoin protobuf serialized coinbase tx for merged mining",
            "title": "bitcoinMergedMiningCoinbaseTransaction",
            "type": "string"
          },
          "bitcoinMergedMiningHeader": {
            "description": "The 80-byte bitcoin block header for merged mining",
            "title": "bitcoinMergedMiningHeader",
            "type": "string"
          },
          "bitcoinMergedMiningMerkleProof": {
            "description": "The bitcoin merkle proof of coinbase tx for merged mining",
            "title": "bitcoinMergedMiningMerkleProof",
            "type": "string"
          },
          "difficulty": {
            "description": "Integer of the difficulty for this block",
            "title": "blockDifficulty",
            "type": "string"
          },
          "extraData": {
            "description": "The 'extra data' field of this block",
            "title": "blockExtraData",
            "type": "string"
          },
          "gasLimit": {
            "description": "The maximum gas allowed in this block",
            "title": "blockGasLimit",
            "type": "string"
          },
          "gasUsed": {
            "description": "The total used gas by all transactions in this block",
            "title": "blockGasUsed",
            "type": "string"
          },
          "hash": {
            "$ref": "#/components/schemas/BlockHashOrNull"
          },
          "hashForMergedMining": {
            "description": "The the base hash for merged mining",
            "title": "hashForMergedMining",
            "type": "string"
          },
          "logsBloom": {
            "description": "The bloom filter for the logs of the block or null when its the pending block",
            "pattern": "^0x[a-fA-F\\d]+$",
            "title": "blockLogsBloom",
            "type": "string"
          },
          "miner": {
            "$ref": "#/components/schemas/AddressOrNull"
          },
          "nonce": {
            "$ref": "#/components/schemas/NonceOrNull"
          },
          "number": {
            "$ref": "#/components/schemas/BlockNumberOrNull"
          },
          "paidFees": {
            "$ref": "#/components/schemas/IntegerHex",
            "title": "paidFees"
          },
          "parentHash": {
            "$ref": "#/components/schemas/BlockHash"
          },
          "receiptsRoot": {
            "$ref": "#/components/schemas/Keccak",
            "description": "The root of the receipts trie of the block",
            "title": "blockReceiptsRoot"
          },
          "sha3Uncles": {
            "$ref": "#/components/schemas/Keccak",
            "description": "Keccak hash of the uncles data in the block",
            "title": "blockShaUncles"
          },
          "size": {
            "description": "Integer the size of this block in bytes",
            "title": "blockSize",
            "type": "string"
          },
          "stateRoot": {
            "$ref": "#/components/schemas/Keccak",
            "description": "The root of the final state trie of the block",
            "title": "blockStateRoot"
          },
          "timestamp": {
            "description": "The unix timestamp for when the block was collated",
            "title": "blockTimeStamp",
            "type": "string"
          },
          "totalDifficulty": {
            "$ref": "#/components/schemas/IntegerOrNull",
            "description": "Integer of the total difficulty of the chain until this block",
            "title": "blockTotalDifficulty"
          },
          "transactions": {
            "description": "Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Transaction"
                },
                {
                  "$ref": "#/components/schemas/TransactionHash"
                }
              ],
              "title": "transactionOrTransactionHash"
            },
            "title": "transactionsOrHashes",
            "type": "array"
          },
          "transactionsRoot": {
            "$ref": "#/components/schemas/Keccak",
            "description": "The root of the transactions trie of the block.",
            "title": "blockTransactionsRoot"
          },
          "uncles": {
            "description": "Array of uncle hashes",
            "items": {
              "$ref": "#/components/schemas/Keccak",
              "description": "Block hash of the RLP encoding of an uncle block",
              "title": "uncleHash"
            },
            "title": "uncleHashes",
            "type": "array"
          }
        },
        "title": "Block",
        "type": "object"
      },
      "BlockExampleResultFullTransaction": {
        "name": "block",
        "value": {
          "bitcoinMergedMiningCoinbaseTransaction": "0x000000000000008075aec68cfceb2bda1dcc166c1564517793f90ee07fcd446699d440628290564f6088ac0000000000000000266a24aa21a9ed08ade7f48a09603efcf910361380e3ce1ebc9813eb4a7d85473a9c170d79017e00000000000000002a6a52534b424c4f434b3ac4d2419792f08338d4fa5fd21c61ad79484c875f1ac9b483f253842edb96c92400000000",
          "bitcoinMergedMiningHeader": "0x000000202d17c9a169c4c93eaf376bc35ff6561d0b743880600f3d8370020000000000008d31ad07fc72224ddd23632463f2119d977defc86f1b0ebf16171225bf9c316c117c1f5d531d041a8046d09f",
          "bitcoinMergedMiningMerkleProof": "0x91062f54a2ea641bebaa19e4d58df522a395bc89e6e230f98cc343d39a8deb070f190492c042ea5ebb75f6e9488345eedf5ff35219fd3ac21be0778e7feed9fc117db6cd70f02ddc5635577981626db173937a041ae38c9cebd10e645fd4ddc00d8662b4bbb4e4309ff07fb30ca6c3365bea0f823a5fe83f60750a3b0f62da5ec8ca82637afafe9869ecfdb26e5136c849080b46f6230090773949a1010a91ce82b1c65d92f57836e28e9f2f90133d4dc2376ea337bd76836058e5cc9ae6975e6211f67ff7f76793b2f505a621ef7c1f90f0f4d4badc62aaa70a20f223160961",
          "cumulativeDifficulty": "0x4ff04782",
          "difficulty": "0x1aa2b738",
          "extraData": "0x",
          "gasLimit": "0x67c280",
          "gasUsed": "0x0",
          "hash": "0xf1652d8322a880e520f996f7d28b645814a58a202d7d2ab7f058e5566fe4f9f3",
          "hashForMergedMining": "0xc4d2419792f08338d4fa5fd21c61ad79484c875f1ac9b483f253842edb96c924",
          "logsBloom": "0x
          "miner": "0x1fab9a0e24ffc209b01faa5a61ad4366982d0b7f",
          "minimumGasPrice": "0x0",
          "number": "0x1b4",
          "paidFees": "0x0",
          "parentHash": "0x9203a97b2595a44e8d31dd7bf607155620dd50982ac282fc776e21a58b2f7795",
          "receiptsRoot": "0x2cdc6fdc519baad55c4f9d86d1415dbfe21265c6b2ba1f283e1391e015735c42",
          "sha3Uncles": "0x2f752c2e72d38f3677bfa47bd54ec10441141a6415f3be121341d94276dfd732",
          "size": "0xafe",
          "stateRoot": "0xa12e5b995ec8056d6c2d2558c6f4e1ab7f0d6d3eaed868e84c00923cf58bb642",
          "timestamp": "0x5d1f7c06",
          "totalDifficulty": "0x1f61daa8d6",
          "transactions": [
            {
              "$ref": "#/components/schemas/TransactionExampleResult"
            }
          ],
          "transactionsRoot": "0xe94962ab91fe305207670ca17d958ce15bdd553aa6630eba07476c0f35a65b50",
          "uncles": [
            "0x6d12270d24b591931974b75c1a753d1db8c22372baf1aaaa79253858caeed52b",
            "0x9ea21e7d69ffb54face62769a04b08434d606a40c12e1348c4da348d91a9f5e4"
          ]
        }
      },
      "BlockExampleResultTransactionHash": {
        "name": "block",
        "value": {
          "bitcoinMergedMiningCoinbaseTransaction": "0x000000000000008075aec68cfceb2bda1dcc166c1564517793f90ee07fcd446699d440628290564f6088ac0000000000000000266a24aa21a9ed08ade7f48a09603efcf910361380e3ce1ebc9813eb4a7d85473a9c170d79017e00000000000000002a6a52534b424c4f434b3ac4d2419792f08338d4fa5fd21c61ad79484c875f1ac9b483f253842edb96c92400000000",
          "bitcoinMergedMiningHeader": "0x000000202d17c9a169c4c93eaf376bc35ff6561d0b743880600f3d8370020000000000008d31ad07fc72224ddd23632463f2119d977defc86f1b0ebf16171225bf9c316c117c1f5d531d041a8046d09f",
          "bitcoinMergedMiningMerkleProof": "0x91062f54a2ea641bebaa19e4d58df522a395bc89e6e230f98cc343d39a8deb070f190492c042ea5ebb75f6e9488345eedf5ff35219fd3ac21be0778e7feed9fc117db6cd70f02ddc5635577981626db173937a041ae38c9cebd10e645fd4ddc00d8662b4bbb4e4309ff07fb30ca6c3365bea0f823a5fe83f60750a3b0f62da5ec8ca82637afafe9869ecfdb26e5136c849080b46f6230090773949a1010a91ce82b1c65d92f57836e28e9f2f90133d4dc2376ea337bd76836058e5cc9ae6975e6211f67ff7f76793b2f505a621ef7c1f90f0f4d4badc62aaa70a20f223160961",
          "cumulativeDifficulty": "0x4ff04782",
          "difficulty": "0x1aa2b738",
          "extraData": "0x",
          "gasLimit": "0x67c280",
          "gasUsed": "0x0",
          "hash": "0xf1652d8322a880e520f996f7d28b645814a58a202d7d2ab7f058e5566fe4f9f3",
          "hashForMergedMining": "0xc4d2419792f08338d4fa5fd21c61ad79484c875f1ac9b483f253842edb96c924",
          "logsBloom": "0x
          "miner": "0x1fab9a0e24ffc209b01faa5a61ad4366982d0b7f",
          "minimumGasPrice": "0x0",
          "number": "0x1b4",
          "paidFees": "0x0",
          "parentHash": "0x9203a97b2595a44e8d31dd7bf607155620dd50982ac282fc776e21a58b2f7795",
          "receiptsRoot": "0x2cdc6fdc519baad55c4f9d86d1415dbfe21265c6b2ba1f283e1391e015735c42",
          "sha3Uncles": "0x2f752c2e72d38f3677bfa47bd54ec10441141a6415f3be121341d94276dfd732",
          "size": "0xafe",
          "stateRoot": "0xa12e5b995ec8056d6c2d2558c6f4e1ab7f0d6d3eaed868e84c00923cf58bb642",
          "timestamp": "0x5d1f7c06",
          "totalDifficulty": "0x1f61daa8d6",
          "transactions": [
            "0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b"
          ],
          "transactionsRoot": "0xe94962ab91fe305207670ca17d958ce15bdd553aa6630eba07476c0f35a65b50",
          "uncles": [
            "0x6d12270d24b591931974b75c1a753d1db8c22372baf1aaaa79253858caeed52b",
            "0x9ea21e7d69ffb54face62769a04b08434d606a40c12e1348c4da348d91a9f5e4"
          ]
        }
      },
      "BlockHash": {
        "description": "The hex representation of the Keccak 256 of the RLP encoded block",
        "pattern": "^0x[a-fA-F\\d]{64}$",
        "title": "blockHash",
        "type": "string"
      },
      "BlockHashOrNull": {
        "$ref": "#/components/schemas/KeccakOrPending",
        "description": "The block hash or null when its the pending block",
        "title": "blockHashOrNull"
      },
      "BlockNumberDec": {
        "$ref": "#/components/schemas/IntegerDec",
        "description": "The decimal representation of the block's height",
        "title": "blockNumberDec",
        "type": "string"
      },
      "BlockNumberHex": {
        "$ref": "#/components/schemas/IntegerHex",
        "description": "The hex representation of the block's height",
        "title": "blockNumberHex",
        "type": "string"
      },
      "BlockNumberOrNull": {
        "description": "The block number or null when its the pending block",
        "oneOf": [
          {
            "$ref": "#/components/schemas/BlockNumberHex"
          },
          {
            "$ref": "#/components/schemas/Null"
          }
        ],
        "title": "blockNumberOrNull"
      },
      "BlockNumberTag": {
        "description": "A fixed tag describing block height, check options below.",
        "enum": [
          "earliest",
          "latest",
          "pending"
        ],
        "title": "blockNumberTag",
        "type": "string"
      },
      "BlockOrNull": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Block"
          },
          {
            "$ref": "#/components/schemas/Null"
          }
        ],
        "title": "blockOrNull"
      },
      "BlockRef": {
        "description": "Object defining block references",
        "properties": {
          "blockHash": {
            "$ref": "#/components/schemas/BlockHash"
          },
          "blockNumber": {
            "$ref": "#/components/schemas/BlockNumberHex"
          }
        },
        "title": "blockRef",
        "type": "object"
      },
      "BloomFilter": {
        "description": "A 2048 bit bloom filter from the logs of the transaction. Each log sets 3 bits though taking the low-order 11 bits of each of the first three pairs of bytes in a Keccak 256 hash of the log's byte series",
        "title": "bloomFilter",
        "type": "string"
      },
      "Bytes": {
        "description": "Hex representation of a variable length byte array",
        "pattern": "^0x([a-fA-F0-9]?)+$",
        "title": "bytes",
        "type": "string"
      },
      "DataWord": {
        "description": "Hex representation of a 256 bit unit of data",
        "pattern": "^0x([a-fA-F\\d]{64})?$",
        "title": "dataWord",
        "type": "string"
      },
      "DestinationAddress": {
        "description": "Destination address of the transaction. Null if it was a contract create.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Address"
          },
          {
            "$ref": "#/components/schemas/Null"
          }
        ],
        "title": "To"
      },
      "Difficulty": {
        "$ref": "#/components/schemas/DataWord",
        "description": "The boundary condition ('target'), 2^256 / difficulty.",
        "title": "difficulty"
      },
      "FilterId": {
        "description": "An identifier used to reference the filter.",
        "title": "filterId",
        "type": "string"
      },
      "IntegerDec": {
        "description": "Decimal representation of the integer",
        "pattern": "^[0-9]+$",
        "title": "integer dec",
        "type": "string"
      },
      "IntegerHex": {
        "description": "Hex representation of the integer",
        "pattern": "^0x[a-fA-F0-9]+$",
        "title": "integer hex",
        "type": "string"
      },
      "IntegerOrNull": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/IntegerHex"
          },
          {
            "$ref": "#/components/schemas/Null"
          }
        ],
        "title": "integerOrNull"
      },
      "Keccak": {
        "description": "Hex representation of a Keccak 256 hash",
        "pattern": "^0x[a-fA-F\\d]{64}$",
        "title": "keccak",
        "type": "string"
      },
      "KeccakOrPending": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Keccak"
          },
          {
            "$ref": "#/components/schemas/Null"
          }
        ],
        "title": "keccakOrPending"
      },
      "Log": {
        "description": "An indexed event generated during a transaction",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/Address",
            "description": "Sender of the transaction",
            "title": "LogAddress"
          },
          "blockHash": {
            "$ref": "#/components/schemas/BlockHash"
          },
          "blockNumber": {
            "$ref": "#/components/schemas/BlockNumberHex"
          },
          "data": {
            "$ref": "#/components/schemas/Bytes",
            "description": "The data/input string sent along with the transaction",
            "title": "LogData"
          },
          "logIndex": {
            "$ref": "#/components/schemas/IntegerHex",
            "description": "The index of the event within its transaction, null when its pending",
            "title": "LogIndex"
          },
          "removed": {
            "description": "Whether or not the log was orphaned off the main chain",
            "title": "logIsRemoved",
            "type": "boolean"
          },
          "topics": {
            "$ref": "#/components/schemas/Topics"
          },
          "transactionHash": {
            "$ref": "#/components/schemas/TransactionHash"
          },
          "transactionIndex": {
            "$ref": "#/components/schemas/TransactionIndex"
          }
        },
        "title": "log",
        "type": "object"
      },
      "LogExampleResult": {
        "name": "result",
        "value": [
          {
            "address": "0x16c5785ac562ff41e2dcfdf829c5a142f1fccd7d",
            "blockHash": "0x8216c5785ac562ff41e2dcfdf5785ac562ff41e2dcfdf829c5a142f1fccd7d",
            "blockNumber": "0x1b4",
            "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "logIndex": "0x1",
            "topics": [
              "0x59ebeb90bc63057b6515673c3ecf9438e5058bca0f92585014eced636878c9a5"
            ],
            "transactionHash": "0xdf829c5a142f1fccd7d8216c5785ac562ff41e2dcfdf5785ac562ff41e2dcf",
            "transactionIndex": "0x0"
          }
        ]
      },
      "MixHash": {
        "$ref": "#/components/schemas/DataWord",
        "description": "The mix digest.",
        "title": "mixHash"
      },
      "Nonce": {
        "$ref": "#/components/schemas/IntegerHex",
        "description": "A number only to be used once",
        "title": "nonce"
      },
      "NonceOrNull": {
        "description": "Randomly selected number to satisfy the proof-of-work or null when its the pending block",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Nonce"
          },
          {
            "$ref": "#/components/schemas/Null"
          }
        ],
        "title": "nonceOrNull"
      },
      "Null": {
        "description": "Null",
        "title": "null",
        "type": "null"
      },
      "Position": {
        "description": "Hex representation of the storage slot where the variable exists",
        "pattern": "^0x([a-fA-F0-9]?)+$",
        "title": "position",
        "type": "string"
      },
      "PowHash": {
        "$ref": "#/components/schemas/DataWord",
        "description": "Current block header PoW hash.",
        "title": "powHash"
      },
      "ProofNode": {
        "$ref": "#/components/schemas/Bytes",
        "description": "An individual node used to prove a path down a merkle-patricia-tree",
        "title": "proofNode"
      },
      "Receipt": {
        "description": "The receipt of a transaction",
        "properties": {
          "blockHash": {
            "$ref": "#/components/schemas/BlockHash"
          },
          "blockNumber": {
            "$ref": "#/components/schemas/BlockNumberHex"
          },
          "contractAddress": {
            "$ref": "#/components/schemas/AddressOrNull",
            "description": "The contract address created, if the transaction was a contract creation, otherwise null",
            "title": "ReceiptContractAddress"
          },
          "cumulativeGasUsed": {
            "$ref": "#/components/schemas/IntegerHex",
            "description": "The gas units used by the transaction",
            "title": "ReceiptCumulativeGasUsed"
          },
          "from": {
            "$ref": "#/components/schemas/Address",
            "description": "The sender of the transaction",
            "title": "From"
          },
          "gasUsed": {
            "$ref": "#/components/schemas/IntegerHex",
            "description": "The total gas used by the transaction",
            "title": "ReceiptGasUsed"
          },
          "logs": {
            "description": "An array of all the logs triggered during the transaction",
            "items": {
              "$ref": "#/components/schemas/Log"
            },
            "title": "logs",
            "type": "array"
          },
          "logsBloom": {
            "$ref": "#/components/schemas/BloomFilter"
          },
          "postTransactionState": {
            "$ref": "#/components/schemas/Keccak",
            "description": "The intermediate stateRoot directly after transaction execution.",
            "title": "ReceiptPostTransactionState"
          },
          "root": {
            "description": "32 bytes of post-transaction `stateroot` (pre Byzantium).",
            "title": "Receipt Root",
            "type": "string"
          },
          "status": {
            "description": "Whether or not the transaction threw an error.",
            "title": "ReceiptStatus",
            "type": "boolean"
          },
          "to": {
            "$ref": "#/components/schemas/DestinationAddress"
          },
          "transactionHash": {
            "$ref": "#/components/schemas/TransactionHash"
          },
          "transactionIndex": {
            "$ref": "#/components/schemas/TransactionIndex"
          }
        },
        "required": [
          "blockHash",
          "blockNumber",
          "contractAddress",
          "cumulativeGasUsed",
          "from",
          "gasUsed",
          "logs",
          "logsBloom",
          "to",
          "transactionHash",
          "transactionIndex"
        ],
        "title": "receipt",
        "type": "object"
      },
      "SeedHash": {
        "$ref": "#/components/schemas/DataWord",
        "description": "The seed hash used for the DAG.",
        "title": "seedHash"
      },
      "Topic": {
        "$ref": "#/components/schemas/DataWord",
        "description": "32 Bytes DATA of indexed log arguments. (In solidity: The first topic is the hash of the signature of the event (e.g. Deposit(address,bytes32,uint256))",
        "title": "topic"
      },
      "Topics": {
        "description": "Topics are order-dependent. Each topic can also be an array of DATA with `or` options.",
        "items": {
          "$ref": "#/components/schemas/Topic"
        },
        "title": "LogTopics",
        "type": "array"
      },
      "Transaction": {
        "properties": {
          "blockHash": {
            "$ref": "#/components/schemas/BlockHashOrNull"
          },
          "blockNumber": {
            "$ref": "#/components/schemas/BlockNumberOrNull"
          },
          "from": {
            "$ref": "#/components/schemas/Address",
            "description": "The sender of the transaction",
            "title": "From"
          },
          "gas": {
            "description": "The gas limit provided by the sender in Wei",
            "title": "transactionGas",
            "type": "string"
          },
          "gasPrice": {
            "description": "The gas price willing to be paid by the sender in Wei",
            "title": "transactionGasPrice",
            "type": "string"
          },
          "hash": {
            "$ref": "#/components/schemas/TransactionHash"
          },
          "input": {
            "description": "The data field sent with the transaction",
            "title": "transactionInput",
            "type": "string"
          },
          "nonce": {
            "$ref": "#/components/schemas/Nonce",
            "description": "The total number of prior transactions made by the sender",
            "title": "transactionNonce"
          },
          "r": {
            "description": "ECDSA signature r",
            "title": "transactionSigR",
            "type": "string"
          },
          "s": {
            "description": "ECDSA signature s",
            "title": "transactionSigS",
            "type": "string"
          },
          "to": {
            "$ref": "#/components/schemas/DestinationAddress"
          },
          "transactionIndex": {
            "$ref": "#/components/schemas/TransactionIndex"
          },
          "v": {
            "description": "ECDSA recovery id",
            "title": "transactionSigV",
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/IntegerHex",
            "description": "Value of Ether being transferred in Wei",
            "title": "transactionValue"
          }
        },
        "required": [
          "gas",
          "gasPrice",
          "nonce"
        ],
        "title": "transaction",
        "type": "object"
      },
      "TransactionCreate": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Bytes",
            "description": "The compiled code of a contract OR the hash of the invoked method signature and encoded parameters. For details see https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI or https://docs.soliditylang.org/en/latest/abi-spec.html.",
            "title": "transactionData"
          },
          "from": {
            "$ref": "#/components/schemas/Address",
            "description": "The address the transaction is send from",
            "title": "From"
          },
          "gas": {
            "description": "Integer of the gas provided for the transaction execution. It will return unused gas. Default: 90000.",
            "title": "transactionGas",
            "type": "string"
          },
          "gasPrice": {
            "description": "Integer of the gasPrice used for each paid gas.",
            "title": "transactionGasPrice",
            "type": "string"
          },
          "nonce": {
            "$ref": "#/components/schemas/Nonce",
            "description": "The total number of prior transactions made by the sender",
            "title": "transactionNonce"
          },
          "to": {
            "$ref": "#/components/schemas/DestinationAddress",
            "description": "The address the transaction is directed to. Optional when creating new contract."
          },
          "value": {
            "$ref": "#/components/schemas/IntegerHex",
            "description": "Integer of the value sent with this transaction",
            "title": "transactionValue"
          }
        },
        "required": [
          "from",
          "data"
        ],
        "title": "transaction",
        "type": "object"
      },
      "TransactionCreateExampleParam": {
        "name": "transactionData",
        "value": {
          "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "from": "0xa7d9ddbe1f17865597fbd27ec712455208b6b76d",
          "gas": "0xc350",
          "gasPrice": "0x4a817c800",
          "to": "0xf02c1c8e6114b1dbe8937a39260b5b0a374432bb",
          "value": "0xf3dbb76162000"
        }
      },
      "TransactionExampleResult": {
        "blockHash": "0xf1652d8322a880e520f996f7d28b645814a58a202d7d2ab7f058e5566fe4f9f3",
        "blockNumber": "0x1b4",
        "from": "0xa7d9ddbe1f17865597fbd27ec712455208b6b76d",
        "gas": "0xc350",
        "gasPrice": "0x4a817c800",
        "hash": "0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b",
        "input": "0x68656c6c6f21",
        "nonce": "0x15",
        "r": "0x1b5e176d927f8e9ab405058b2d2457392da3e20f328b16ddabcebc33eaac5fea",
        "s": "0x4ba69724e8f69de52f0125ad8b3c5c2cef33019bac3249e2c0a2192766d1721c",
        "to": "0xf02c1c8e6114b1dbe8937a39260b5b0a374432bb",
        "transactionIndex": "0x41",
        "v": "0x25",
        "value": "0xf3dbb76162000"
      },
      "TransactionHash": {
        "$ref": "#/components/schemas/Keccak",
        "description": "Keccak 256 Hash of the RLP encoding of a transaction",
        "title": "transactionHash",
        "type": "string"
      },
      "TransactionIndex": {
        "$ref": "#/components/schemas/IntegerOrNull",
        "description": "The index of the transaction. null when its pending",
        "title": "transactionIndex"
      },
      "Transactions": {
        "description": "An array of transactions",
        "items": {
          "$ref": "#/components/schemas/Transaction"
        },
        "title": "transactions",
        "type": "array"
      }
    },
    "contentDescriptors": {
      "Address": {
        "name": "address",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Address"
        }
      },
      "Block": {
        "description": "A block object",
        "name": "block",
        "schema": {
          "$ref": "#/components/schemas/Block"
        }
      },
      "BlockHash": {
        "name": "blockHash",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/BlockHash"
        }
      },
      "BlockNumberOrTag": {
        "name": "blockNumberOrTag",
        "required": true,
        "schema": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/BlockNumberHex"
            },
            {
              "$ref": "#/components/schemas/BlockNumberTag"
            }
          ],
          "title": "blockNumberOrTag"
        }
      },
      "BlockRefOrNumberOrTag": {
        "name": "blockRefOrNumberOrTag",
        "required": true,
        "schema": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/BlockRef"
            },
            {
              "$ref": "#/components/schemas/BlockNumberHex"
            },
            {
              "$ref": "#/components/schemas/BlockNumberTag"
            }
          ],
          "title": "blockRefOrNumberOrTag"
        }
      },
      "Filter": {
        "name": "filter",
        "required": true,
        "schema": {
          "description": "A filter used to monitor the blockchain for log/events",
          "properties": {
            "address": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Address"
                },
                {
                  "$ref": "#/components/schemas/Addresses"
                }
              ],
              "title": "oneOrArrayOfAddresses"
            },
            "fromBlock": {
              "$ref": "#/components/schemas/BlockNumberHex"
            },
            "toBlock": {
              "$ref": "#/components/schemas/BlockNumberHex"
            },
            "topics": {
              "$ref": "#/components/schemas/Topics"
            }
          },
          "title": "filter",
          "type": "object"
        }
      },
      "FilterId": {
        "name": "filterId",
        "schema": {
          "$ref": "#/components/schemas/FilterId"
        }
      },
      "GasPrice": {
        "name": "gasPrice",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/IntegerHex",
          "description": "Integer of the gas price",
          "title": "gasPriceResult"
        }
      },
      "Logs": {
        "description": "An array of all logs matching filter with given id.",
        "name": "logs",
        "schema": {
          "description": "Array of log objects, or an empty array if nothing has changed since last poll.",
          "items": {
            "$ref": "#/components/schemas/Log"
          },
          "title": "setOfLogs",
          "type": "array"
        }
      },
      "Nonce": {
        "name": "nonce",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Nonce"
        }
      },
      "Position": {
        "name": "key",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Position"
        }
      },
      "Transaction": {
        "name": "transaction",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Transaction"
        }
      },
      "TransactionCreate": {
        "description": "The transaction data",
        "name": "transactionData",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionCreate"
        }
      },
      "TransactionHash": {
        "name": "transactionHash",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionHash"
        }
      },
      "TransactionResult": {
        "description": "Returns a transaction or null",
        "name": "transactionResult",
        "schema": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/Transaction"
            },
            {
              "$ref": "#/components/schemas/Null"
            }
          ],
          "title": "TransactionOrNull"
        }
      },
      "UncleCountResult": {
        "description": "The Number of total uncles in the given block",
        "name": "uncleCountResult",
        "schema": {
          "$ref": "#/components/schemas/IntegerOrNull"
        }
      }
    }
  }
}