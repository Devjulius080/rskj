{
  "openrpc": "1.0.0",
  "info": {
    "version": "1.0.10",
    "title": "RSK JSON-RPC",
    "description": "This API lets you interact with a RSK client via JSON-RPC",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "methods": [
    {
      "name": "eth_uninstallFilter",
      "summary": "Uninstalls a filter with given id. Should always be called when watch is no longer needed. Additionally Filters timeout when they aren't requested with eth_getFilterChanges for a period of time.",
      "params": [
        {
          "name": "filterId",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/FilterId"
          }
        }
      ],
      "result": {
        "name": "filterUninstalledSuccess",
        "description": "returns true if the filter was successfully uninstalled, false otherwise.",
        "schema": {
          "type": "boolean"
        }
      }
    }
  ],
  "components": {
    "schemas": {
      "StorageProofKey": {
        "title": "storageProofKey",
        "description": "The key used to get the storage slot in its account tree.",
        "$ref": "#/components/schemas/IntegerHex"
      },
      "StorageProof": {
        "title": "storageProofSet",
        "type": "array",
        "description": "Current block header PoW hash.",
        "items": {
          "title": "storageProof",
          "type": "object",
          "description": "Object proving a relationship of a storage value to an account's storageHash.",
          "properties": {
            "key": {
              "$ref": "#/components/schemas/StorageProofKey"
            },
            "value": {
              "title": "storageProofValue",
              "description": "The value of the storage slot in its account tree",
              "$ref": "#/components/schemas/IntegerHex"
            },
            "proof": {
              "$ref": "#/components/schemas/ProofNodes"
            }
          }
        }
      },
      "ProofNodes": {
        "title": "proofNodes",
        "type": "array",
        "description": "The set of node values needed to traverse a patricia merkle tree (from root to leaf) to retrieve a value",
        "items": {
          "$ref": "#/components/schemas/ProofNode"
        }
      },
      "PowHash": {
        "title": "powHash",
        "description": "Current block header PoW hash.",
        "$ref": "#/components/schemas/DataWord"
      },
      "SeedHash": {
        "title": "seedHash",
        "description": "The seed hash used for the DAG.",
        "$ref": "#/components/schemas/DataWord"
      },
      "MixHash": {
        "title": "mixHash",
        "description": "The mix digest.",
        "$ref": "#/components/schemas/DataWord"
      },
      "Difficulty": {
        "title": "difficulty",
        "description": "The boundary condition ('target'), 2^256 / difficulty.",
        "$ref": "#/components/schemas/DataWord"
      },
      "BlockNumberTag": {
        "title": "blockNumberTag",
        "type": "string",
        "description": "A fixed tag describing block height, check options below.",
        "enum": [
          "earliest",
          "latest",
          "pending"
        ]
      },
      "AddressOrNull": {
        "title": "addressOrNull",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Address"
          },
          {
            "$ref": "#/components/schemas/Null"
          }
        ]
      },
      "BloomFilter": {
        "title": "bloomFilter",
        "type": "string",
        "description": "A 2048 bit bloom filter from the logs of the transaction. Each log sets 3 bits though taking the low-order 11 bits of each of the first three pairs of bytes in a Keccak 256 hash of the log's byte series"
      },
      "TransactionIndex": {
        "title": "transactionIndex",
        "description": "The index of the transaction. null when its pending",
        "$ref": "#/components/schemas/IntegerOrNull"
      },
      "BlockNumberOrNull": {
        "title": "blockNumberOrNull",
        "description": "The block number or null when its the pending block",
        "oneOf": [
          {
            "$ref": "#/components/schemas/BlockNumberHex"
          },
          {
            "$ref": "#/components/schemas/Null"
          }
        ]
      },
      "BlockHashOrNull": {
        "title": "blockHashOrNull",
        "description": "The block hash or null when its the pending block",
        "$ref": "#/components/schemas/KeccakOrPending"
      },
      "NonceOrNull": {
        "title": "nonceOrNull",
        "description": "Randomly selected number to satisfy the proof-of-work or null when its the pending block",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Nonce"
          },
          {
            "$ref": "#/components/schemas/Null"
          }
        ]
      },
      "From": {
        "title": "From",
        "description": "The sender of the transaction",
        "$ref": "#/components/schemas/Address"
      },
      "To": {
        "title": "To",
        "description": "Destination address of the transaction. Null if it was a contract create.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Address"
          },
          {
            "$ref": "#/components/schemas/Null"
          }
        ]
      },
      "Block": {
        "title": "Block",
        "description": "The Block is the collection of relevant pieces of information (known as the block header), together with information corresponding to the comprised transactions, and a set of other block headers that are known to have a parent equal to the present block’s parent’s parent.",
        "type": "object",
        "properties": {
          "number": {
            "$ref": "#/components/schemas/BlockNumberOrNull"
          },
          "hash": {
            "$ref": "#/components/schemas/BlockHashOrNull"
          },
          "parentHash": {
            "$ref": "#/components/schemas/BlockHash"
          },
          "nonce": {
            "$ref": "#/components/schemas/NonceOrNull"
          },
          "sha3Uncles": {
            "title": "blockShaUncles",
            "description": "Keccak hash of the uncles data in the block",
            "$ref": "#/components/schemas/Keccak"
          },
          "logsBloom": {
            "title": "blockLogsBloom",
            "type": "string",
            "description": "The bloom filter for the logs of the block or null when its the pending block",
            "pattern": "^0x[a-fA-F\\d]+$"
          },
          "transactionsRoot": {
            "title": "blockTransactionsRoot",
            "description": "The root of the transactions trie of the block.",
            "$ref": "#/components/schemas/Keccak"
          },
          "stateRoot": {
            "title": "blockStateRoot",
            "description": "The root of the final state trie of the block",
            "$ref": "#/components/schemas/Keccak"
          },
          "receiptsRoot": {
            "title": "blockReceiptsRoot",
            "description": "The root of the receipts trie of the block",
            "$ref": "#/components/schemas/Keccak"
          },
          "miner": {
            "$ref": "#/components/schemas/AddressOrNull"
          },
          "difficulty": {
            "title": "blockDifficulty",
            "type": "string",
            "description": "Integer of the difficulty for this block"
          },
          "totalDifficulty": {
            "title": "blockTotalDifficulty",
            "description": "Integer of the total difficulty of the chain until this block",
            "$ref": "#/components/schemas/IntegerOrNull"
          },
          "extraData": {
            "title": "blockExtraData",
            "type": "string",
            "description": "The 'extra data' field of this block"
          },
          "size": {
            "title": "blockSize",
            "type": "string",
            "description": "Integer the size of this block in bytes"
          },
          "gasLimit": {
            "title": "blockGasLimit",
            "type": "string",
            "description": "The maximum gas allowed in this block"
          },
          "gasUsed": {
            "title": "blockGasUsed",
            "type": "string",
            "description": "The total used gas by all transactions in this block"
          },
          "timestamp": {
            "title": "blockTimeStamp",
            "type": "string",
            "description": "The unix timestamp for when the block was collated"
          },
          "transactions": {
            "title": "transactionsOrHashes",
            "description": "Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter",
            "type": "array",
            "items": {
              "title": "transactionOrTransactionHash",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Transaction"
                },
                {
                  "$ref": "#/components/schemas/TransactionHash"
                }
              ]
            }
          },
          "uncles": {
            "title": "uncleHashes",
            "description": "Array of uncle hashes",
            "type": "array",
            "items": {
              "title": "uncleHash",
              "description": "Block hash of the RLP encoding of an uncle block",
              "$ref": "#/components/schemas/Keccak"
            }
          }
        }
      },
      "KeccakOrPending": {
        "title": "keccakOrPending",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Keccak"
          },
          {
            "$ref": "#/components/schemas/Null"
          }
        ]
      },
      "Integer": {
        "title": "integer",
        "type": "string",
        "pattern": "^0x[a-fA-F0-9]+$",
        "description": "Hex representation of the integer"
      },
      "DataWord": {
        "title": "dataWord",
        "type": "string",
        "description": "Hex representation of a 256 bit unit of data",
        "pattern": "^0x([a-fA-F\\d]{64})?$"
      }
    },
    "contentDescriptors": {
      "Null": {
        "name": "Null",
        "description": "JSON Null value",
        "summary": "Null value",
        "schema": {
          "$ref": "#/components/schemas/Null"
        }
      },
      "Signature": {
        "name": "signature",
        "summary": "The signature.",
        "required": true,
        "schema": {
          "title": "signatureBytes",
          "type": "string",
          "description": "Hex representation of byte array between 2 and 65 chars long",
          "pattern": "0x^([A-Fa-f0-9]{2}){65}$"
        }
      },
      "GasPrice": {
        "name": "gasPrice",
        "required": true,
        "schema": {
          "title": "gasPriceResult",
          "description": "Integer of the gas price",
          "$ref": "#/components/schemas/IntegerHex"
        }
      },
      "Transaction": {
        "required": true,
        "name": "transaction",
        "schema": {
          "$ref": "#/components/schemas/Transaction"
        }
      },
      "Message": {
        "name": "message",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Bytes"
        }
      },
      "Address": {
        "name": "address",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Address"
        }
      },
      "Nonce": {
        "name": "nonce",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Nonce"
        }
      }
    }
  }
}
